@model IEnumerable<PatientPortal.Models.Patient>
@using Kendo.Mvc.UI

@{ ViewData["Title"] = "EditInline"; }

@(Html.Kendo().Grid<PatientPortal.Models.Patient>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.PatientId).Title("ID").Width(100);
        columns.Bound(p => p.FirstName).Title("First Name").Width(100);
        columns.Bound(p => p.LastName).Title("Last Name").Width(100);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(172);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:430px;" })
    .Filterable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.PatientId))
        .Create(update => update.Action("EditingInline_Create", "Grid"))
        .Read(read => read.Action("EditingInline_Read", "Grid"))
        .Update(update => update.Action("EditingInline_Update", "Grid"))
        .Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
     )
    )
<script type="text/javascript">function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }</script>